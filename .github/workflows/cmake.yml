name: msc_ver

on:
  pull_request:
  push:
  workflow_dispatch:

# concurrency:
#   group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
#   cancel-in-progress: true

# permissions:
#   contents: read # to fetch code (actions/checkout)

jobs:
  build_wheels:
    name: Build ${{ matrix.buildplat[0] }}-${{ matrix.python[0] }}-${{ matrix.buildplat[1] }}
    runs-on: ${{ matrix.buildplat[0] }}
    strategy:
      # Ensure that a wheel builder finishes even if another fails
      fail-fast: false
      matrix:
        # Github Actions doesn't support pairing matrix values together, let's improvise
        # https://github.com/github/feedback/discussions/7835#discussioncomment-1769026
        buildplat:
          - [windows-2019, x64]
          - [windows-2019, Win32]
        python:
          - [cp310, v141]
          - [cp311, v141]
          - [cp312, v142]
          # - [cp313, v142]
    steps:
      - name: Checkout
        uses: actions/checkout@v4.1.7

      # - name: Setup MSVC (32-bit)
      #   if: ${{ matrix.buildplat[1] == 'win32' }}
      #   uses: bus1/cabuild/action/msdevshell@e22aba57d6e74891d059d66501b6b5aed8123c4d  # v1
      #   with:
      #     architecture: 'x86'

      # # Used to push the built wheels
      # - uses: actions/setup-python@39cd14951b08e74b54015e9e001cdefcf80e669f # v5.1.1
      #   with:
      #     python-version: "3.x"

      # - name: Setup macOS
      #   if: matrix.buildplat[0] == 'macos-13' || matrix.buildplat[0] == 'macos-14'
      #   run: |
      #     # Needed due to https://github.com/actions/runner-images/issues/3371
      #     # Supported versions: https://github.com/actions/runner-images/blob/main/images/macos/macos-14-arm64-Readme.md
      #     echo "FC=gfortran-13" >> "$GITHUB_ENV"
      #     echo "F77=gfortran-13" >> "$GITHUB_ENV"
      #     echo "F90=gfortran-13" >> "$GITHUB_ENV"
      #     if [[ ${{ matrix.buildplat[2] }} == 'accelerate' ]]; then
      #       # macosx_arm64 and macosx_x86_64 with accelerate
      #       # only target Sonoma onwards
      #       CIBW="MACOSX_DEPLOYMENT_TARGET=14.0 INSTALL_OPENBLAS=false RUNNER_OS=macOS"
      #       echo "CIBW_ENVIRONMENT_MACOS=$CIBW" >> "$GITHUB_ENV"

      #       # the macos-13 image that's used for building the x86_64 wheel can't test
      #       # a wheel with deployment target >= 14 without further work
      #       echo "CIBW_TEST_SKIP=*-macosx_x86_64" >> "$GITHUB_ENV"
      #     else
      #       # macosx_x86_64 with OpenBLAS
      #       # if INSTALL_OPENBLAS isn't specified then scipy-openblas is automatically installed
      #       CIBW="RUNNER_OS=macOS"
      #       PKG_CONFIG_PATH="$PWD/.openblas"
      #       DYLD="$DYLD_LIBRARY_PATH:/$PWD/.openblas/lib"
      #       echo "CIBW_ENVIRONMENT_MACOS=$CIBW PKG_CONFIG_PATH=$PKG_CONFIG_PATH DYLD_LIBRARY_PATH=$DYLD" >> "$GITHUB_ENV"  
      #     fi

      - name: Configure
        run: cmake -L -B build -T ${{ matrix.python[1] }} -A ${{ matrix.buildplat[1] }}

      - name: Build
        run: cmake --build build --config Release

      - name: Test
        run: ctest --test-dir build -C Release -V

      - name: Run executable and capture output
        id: run_executable
        run: |
          $output=$(./build/Release/msc_ver)  # Replace with your executable
          echo "Output from executable: $output"
          echo "::set-output name=exec_output::$output"

      - name: ${{ steps.run_executable.outputs.exec_output }}
        env:
          EXEC_OUTPUT: ${{ steps.run_executable.outputs.exec_output }}
        run: |
          echo "Step name: $EXEC_OUTPUT"